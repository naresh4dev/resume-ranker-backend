from fpdf import FPDF
from datetime import datetime
import matplotlib
matplotlib.use('Agg')  # Use a non-interactive backend for matplotlib
import matplotlib.pyplot as plt
from collections import Counter
import os
from uuid import uuid4
from pathlib import Path
# Prepare charts directory
BASE_DIR= Path(__file__).resolve().parent.parent
charts_dir = f"{BASE_DIR}/data/charts"
os.makedirs(charts_dir, exist_ok=True)

reports_dir = f"{BASE_DIR}/data/reports"
os.makedirs(charts_dir, exist_ok=True)

# Utility to plot skill gap chart
def generate_skill_gap_chart(results):
    all_missing = [skill for r in results for skill in r["skills"]["missing_skills"]]
    top_missing = Counter(all_missing).most_common(5)
    skills, counts = zip(*top_missing)
    plt.figure(figsize=(6, 4))
    plt.barh(skills, counts, color="#ff6f61")
    plt.xlabel("Frequency")
    plt.title("Top 5 Common Skill Gaps")
    chart_path = os.path.join(charts_dir, "skill_gaps.png")
    plt.tight_layout()
    plt.savefig(chart_path)
    plt.close()
    return chart_path
def generate_top_skills_chart(results, n=10):
    all_missing = [skill for r in results for skill in r["skills"]["matched_skills"]]
    top_missing = Counter(all_missing).most_common(n)
    skills, counts = zip(*top_missing)
    plt.figure(figsize=(6, 4))
    plt.barh(skills, counts, color="green")
    plt.xlabel("Frequency")
    plt.title("Top 10 Top Skills")
    chart_path = os.path.join(charts_dir, "top_skills_gaps.png")
    plt.tight_layout()
    plt.savefig(chart_path)
    plt.close()
    return chart_path

# Generate score distribution chart
def generate_score_distribution_chart(results):
    scores = [r["match_score"] for r in results]
    plt.figure(figsize=(6, 4))
    plt.hist(scores, bins=[0, 25, 50, 75, 100], color="#4f81bd", edgecolor="black")
    plt.xlabel("Match Score")
    plt.ylabel("Number of Candidates")
    plt.title("Candidate Quality Score Distribution")
    chart_path = os.path.join(charts_dir, "score_distribution.png")
    plt.tight_layout()
    plt.savefig(chart_path)
    plt.close()
    return chart_path

# Extract top 5 most common skill keywords
def get_top_skills(results, n=10):
    all_skills = [s["skill_name"] for r in results for s in r["resume_entities"]["skill_keywords"]]
    return [s for s, _ in Counter(all_skills).most_common(n)]

def sanitize(text):
    return text.encode('latin-1', 'replace').decode('latin-1')

# Enhanced PDF Generator
class SafeResumeReportPDF(FPDF):
    def header(self):
        self.set_fill_color(70, 130, 180)
        self.rect(0, 0, 210, 20, 'F')
        self.set_font("Arial", "B", 12)
        self.set_text_color(255, 255, 255)
        self.cell(0, 5, "Resume Analysis Report", 0, 1, "C")
        self.ln(5)
        self.set_text_color(0, 0, 0)

    def cover_page(self):
        self.add_page()
        self.set_font("Arial", "B", 24)
        self.set_text_color(33, 37, 41)
        self.cell(0, 20, "Resume Analysis Report", ln=1, align="C")
        self.set_font("Arial", "I", 14)
        self.set_text_color(100, 100, 100)
        self.multi_cell(0, 10, "Comprehensive Candidate Evaluation Based on Skill Match & Experience Trends", align="C")
        self.ln(5)
        self.set_font("Arial", "", 12)
        self.set_text_color(0, 0, 0)
        self.cell(0, 10, f"Date of Generation: {datetime.now().strftime('%Y-%m-%d')}", ln=1, align="C")
        self.cell(0, 10, "Generated by AI Resume Analyzer", ln=1, align="C")

    def executive_summary(self, total, top_skills, gap_chart_path, top_skills_chart_path, score_chart_path, job_summary=""):
        self.add_page()
        self.set_font("Arial", "B", 16)
        self.cell(0, 10, "Executive Summary", ln=1)
        self.set_font("Arial", "", 12)
        self.multi_cell(0, 10, f"Job Summary: {sanitize(job_summary)}")
        self.cell(0, 10, f"Total Resumes Analyzed: {total}", ln=1)
        self.multi_cell(0, 10, f"Top 10 In-Demand Skills: {', '.join(top_skills)}")
        y_start = self.get_y() + 10
        self.image(top_skills_chart_path, x=10, y=y_start, w=90)
        self.image(gap_chart_path, x=110, y=y_start, w=90)
        self.set_y(y_start + 60)
        
        self.image(score_chart_path, x=50, y=self.get_y()+10, w=120)
        self.ln(60)

    def draw_progress_bar(self, x, y, width, height, progress, color=(46, 204, 113)):
        self.set_fill_color(220, 220, 220)
        self.rect(x, y, width, height, 'F')
        fill_width = width * (progress / 100)
        self.set_fill_color(*color)
        self.rect(x, y, fill_width, height, 'F')

    def resume_analysis(self, result):
        self.add_page()
        name = result["resume_entities"].get("full_name", "N/A")
        email = result["resume_entities"].get("email", "N/A")
        match_score = result["match_score"]
        summary = result.get("summary", "No summary available")
        fileName = result["resume_file_path"]
        skills = result["skills"]
        feedback = result["feedback"]
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, f"Candidate: {name}", ln=1)
        self.set_font("Arial", "", 12)
        self.cell(0, 8, f"Email: {email}", ln=1)
        self.set_text_color(0, 0, 0)
        self.multi_cell(0, 8, f"Summary: {sanitize(summary)}")
        self.set_text_color(255, 165, 0)
        self.set_text_color(0, 0, 255)  # Blue color for hyperlink
        self.cell(0, 10, "View Full Resume" ,ln=1, link=f"http://localhost:8000/api/assets/resume/{fileName}")
        self.set_text_color(0, 0, 0)  # Reset color to black
        self.cell(60, 8, f"Skill Match Score: {match_score}%", ln=1)
        self.draw_progress_bar(10, self.get_y(), 100, 6, match_score)
        self.ln(10)
        self.set_text_color(0, 128, 0)
        self.multi_cell(0, 8, f"Matched Skills: {', '.join(skills['matched_skills'])}")
        self.set_text_color(255, 165, 0)
        self.multi_cell(0, 8, f"Partial Skills: {', '.join(skills['partial_skills'])}")
        self.set_text_color(220, 20, 60)
        self.multi_cell(0, 8, f"Missing Skills: {', '.join(skills['missing_skills'])}")
        self.set_text_color(0, 0, 0)
        self.ln(5)
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "Recommendations for Improvement:", ln=1)
        self.set_font("Arial", "I", 11)
        for line in feedback:
            self.multi_cell(0, 8, f"- {line}")

    def conclusion(self, best_fit_names):
        self.add_page()
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, "Conclusion", ln=1)
        self.set_font("Arial", "", 12)
        self.multi_cell(0, 10, f"Best-Fit Candidates: {', '.join(best_fit_names)}")
        self.ln(10)
        self.set_font("Arial", "I", 11)
        self.cell(0, 10, "For further inquiries, contact: careers@example.com", ln=1, align="C")


def generate_final_report(resumes_json):
    gap_chart_path = generate_skill_gap_chart(resumes_json["results"])
    score_chart_path = generate_score_distribution_chart(resumes_json["results"])
    top_skills_chart_path = generate_top_skills_chart(resumes_json["results"])
    top_skills = get_top_skills(resumes_json["results"])
    best_candidates = sorted(resumes_json["results"], key=lambda r: r["match_score"], reverse=True)[:3]
    best_fit_names = [r["resume_entities"].get("full_name", "N/A") for r in best_candidates]
    final_pdf = SafeResumeReportPDF()
    final_pdf.cover_page()
    final_pdf.executive_summary(len(resumes_json["results"]), top_skills, gap_chart_path, top_skills_chart_path, score_chart_path, job_summary=resumes_json["job_summary"])
    for result in resumes_json["results"]:
        final_pdf.resume_analysis(result)
    final_pdf.conclusion(best_fit_names)
    unque_id = str(uuid4())
    file_name = f"resume_analysis_report_{unque_id}.pdf"
    file_path = f"{reports_dir}/{file_name}"
    final_pdf.output(file_path)
    return file_name

